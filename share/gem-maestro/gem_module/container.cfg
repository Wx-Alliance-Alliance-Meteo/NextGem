#!/bin/bash
date0=$(date "+%s")
date1=${date0}
_checkpoint() {
   set +x
   datetmp=$(date "+%s")
   if [[ "${1:-x}" == "0" ]] ; then
      printf "\n##### GEMMOD Timingpoint: $(date '+%Y%m%d:%H%M%S') ====> ${2:-${0##*/}} Starts ###########\n\n"
   elif [[ "${1:-x}" == "1" ]] ; then
      printf "\n##### GEMMOD Timingpoint: $(date '+%Y%m%d:%H%M%S') ====> ${2:-${0##*/}} Ends  ; Elapsed = $((datetmp - date0)) (since last $((datetmp - date1))) seconds ###########\n\n"
   else
      printf "\n##### GEMMOD Timingpoint: $(date '+%Y%m%d:%H%M%S') ${1:-${0##*/}} ; Elapsed = $((datetmp - date0)) (since last $((datetmp - date1))) seconds\n\n"
   fi
   date1=${datetmp}
   set -x
}
_checkpoint 0 "GEM_module container.cfg"

# Set or check model environment
GOAS=$(($(echo $GEM_version | sed 's/:/ /g' | wc -w)-1))
if [ ${GOAS} -lt 1 ] ; then
   printf "\n This GEM maestro module is intended for GOAS environment ONLY -- ABORT\n\n"
   exit 1
else
   printf "\n GOAS environment detected, using NEW GEM modules -- \n\n"
   GEM_INSTALL=$(echo ${GEM_version} | cut -d ":" -f2)
   GEM_VERSION=$(echo ${GEM_version} | cut -d ":" -f3)
   COMPILER=$(   echo ${GEM_version} | cut -d ":" -f4)
   if [[ -z "${ATM_MODEL_VERSION}" ]] ; then
       ici=$PWD
       cd ${GEM_INSTALL}
       . .eccc_setup_${COMPILER}
       cd ${ici}
   fi
   GEM_BIN=${GEM_INSTALL}/${GEM_WORK}/bin
   export PATH=${PATH}:${SEQ_EXP_HOME}/modules/gem/bin
fi

export CMCCONST=${GEM_INSTALL}/gem_dbase/datafiles/constants
if [ ! -d ${GEM_BIN} ] ; then
   printf "\n Model binaries directory ${GEM_BIN} NOT available -- ABORT\n\n"
   exit 1
fi

echo $PATH | tr ":" "\n"

export CMCCONST=${USER_CMCCONST:-${ATM_MODEL_DFILES}/datafiles/constants}

# External interface
# Path to reference physics_input_table file
# Use table from clone if it exists (when developing with a git clone)
default_phytab=${GEM_STORAGE_DIR:+${gem_DIR}/src/rpnphy/include}
# otherwise, use table from installed GEM
default_phytab=${default_phytab:-${gem_DIR}/share/rpnphy}
expname=${GEM_exp:-$(basename ${SEQ_EXP_HOME})}
MOD_GEM_settings=${GEM_settings:-undefined}
MOD_GEM_outcfg=${GEM_outcfg:-'<no value>'}
MOD_GEM_iaurep=${GEM_iaurep:-'<no value>'}
MOD_GEM_bindir=${GEM_ovbin:-release}
model_analysis=${GEM_anal:-'<no value>'}
model_inrep=${GEM_inrep:-'<no value>'}
model_input=${GEM_model_input:-'<no value>'}
MOD_GEM_restart=${GEM_model_restart:-'<no value>'}
MOD_GEM_climato=${GEM_climato:-${ATM_MODEL_DFILES}/bcmk/climato}
MOD_GEM_geophy=${GEM_geophy:-${ATM_MODEL_DFILES}/bcmk/geophy}
MOD_GEM_phy_intable=${GEM_phy_intable:-${default_phytab}/physics_input_table}
MOD_GEM_ozone=${GEM_ozone:-${CMCCONST}/cmdn/gem/shared/ozoclim_phy45}
MOD_GEM_radtab=${GEM_radtab:-${CMCCONST}/irtab5_std}
MOD_GEM_const=${GEM_const:-${CMCCONST}/thermoconsts}
MOD_GEM_cache=${GEM_cache:-'<no value>'}
MOD_GEM_serverIO=${GEM_serverIO:-'<no value>'}
check_namelist=${GEM_check_settings:-1}
check_partition=${GEM_check_partition:-1}
user_headscript=${GEM_headscript_E:-'<no value>'}
domain_cfgs=${GEM_cfg:-'0:0'}
MOD_GEM_xfer=${GEM_xfer:-"${TRUE_HOST}:${SEQ_EXP_HOME}/hub/${TRUE_HOST}/gridpt/prog/gem"}

xfer_cmd_str=${GEM_xfer_command:-"scp -r"}
MOD_GEM_scp_cmd=${GEM_scp_cmd:-"scp -r"}
MOD_GEM_scp_opt=${MOD_GEM_scp_cmd#* }
MOD_GEM_scp_cmd=${MOD_GEM_scp_cmd%% *}
MOD_GEM_rsync_cmd=${GEM_rsync_cmd:-rsync}
MOD_GEM_nodespec=${GEM_nodespec:-"NoNe"}
model_ptopo=${GEM_ptopo:-"NoNe"}
model_nthreads=${GEM_nthreads:-0x0}     #number of threads within Runmod.tsk (smtdyn x smtphy)
MOD_GEM_d2z=${GEM_d2z:-1}               #run bemol to re-assemble MPI tiles
MOD_GEM_dplusp=${GEM_dplusp:-1}         #assemble dynamics and physics outputs
MOD_GEM_yyoutgrid=${GEM_yyoutgrid:-'U'} #output grid for yin-yang: U or GLB
MOD_GEM_xcasc_rep=${GEM_xcasc_rep}      #backend directory to link cascade files
MOD_GEM_prefix=${GEM_prefix:-''}        #do a move for lazy people
MOD_GEM_xferl=${GEM_xferl:-0}           #transfer model listings files
MOD_GEM_etik=${GEM_etik:-''}            #stamp ('etiket') for FST output files
MOD_GEM_clean=${GEM_clean:-0}           #module will self clean (warning: will break rerunability)
MOD_GEM_clean=0                         # this feature needs tuning
MOD_GEM_timing=${GEM_timing:-0}         #produce timing information
MOD_GEM_inorder=${GEM_inorder:-1}       #ordered listings (option -inorder to Um_run*)
MOD_GEM_save_rstrt=${GEM_save_rstrt:-0} #save restart image for each time slice
MOD_GEM_tailsubmit=${GEM_tailsubmit}
MOD_GEM_cpl_expname=${GEM_cpl_expname}  #activate coupling system
ENVFILE=${GEM_addenv:-''}               #host-specific environment definitions

# Internal definitions
export SETMEX=-ex
export MOD_GEM_debug=${GEM_debug:-0}    #run in debugger: 0, gdb or ddt

MOD_GEM_use_serdate=${GEM_use_serdate:-0}

# Establish multi-domain configuration
DOMAIN_number=0  #TEMPORARY - required to avoid an invalid set namespace on Linux (fix in maestro_1.4.0)

DOMAIN_start=$(echo ${domain_cfgs} | cut -d : -f1 | sed 's/^0*//')
DOMAIN_end=$(echo ${domain_cfgs} | cut -d : -f2 | sed 's/^0*//')
DOMAIN_total=$((DOMAIN_end - DOMAIN_start + 1))
DOMAIN_wide=$(echo ${domain_cfgs} | cut -d : -f3 | sed 's/^0*//')
DOMAIN_wide=${DOMAIN_wide:-${DOMAIN_total}}

DOMAIN_start4=$(printf "%04d" ${DOMAIN_start})
DOMAIN_end4=$(printf "%04d" ${DOMAIN_end})
DOMAIN_total4=$(printf "%04d" ${DOMAIN_total})
DOMAIN_wide4=$(printf "%04d" ${DOMAIN_wide})
_checkpoint 1 "GEM_module container.cfg"
